import subprocess
import sys
import os
import hashlib
from docx import Document
from openpyxl import load_workbook
from tqdm import tqdm
import re
import chardet
import requests


def install_module(module):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", module])
    except subprocess.CalledProcessError as e:
        print(f"Instalacija modula {module} nije uspjela. Pogreška: {e}")
        sys.exit(1)


required_modules = ['requests', 'python-docx', 'tqdm', 'openpyxl', 'chardet']

for module in required_modules:
    try:
        __import__(module)
    except ImportError:
        print(f"Modul {module} nije pronađen. Instalacija...")
        install_module(module)
        print(f"Modul {module} uspješno instaliran.")


# ...

def convert_docx_to_text(docx_path):
    try:
        doc = Document(docx_path)
        text = [paragraph.text for paragraph in doc.paragraphs]
        return '\n'.join(text)
    except FileNotFoundError as e:
        print(f"Error: {e}. The specified document file '{docx_path}' was not found.")
        return None
    except Exception as e:
        print(f"Error: {e}. An unexpected error occurred while processing the document.")
        return None

def extract_text_from_file(file_path):
    _, file_extension = os.path.splitext(file_path)

    try:
        if file_extension == '.docx':
            return convert_docx_to_text(file_path)
        elif file_extension == '.txt':
            with open(file_path, 'rb') as rawfile:
                result = chardet.detect(rawfile.read())
            encoding = result['encoding']

            with open(file_path, 'r', encoding=encoding, errors='replace') as txt_file:
                return txt_file.read()
        elif file_extension == '.xlsx':
            return extract_text_from_excel(file_path)
        else:
            return None
    except FileNotFoundError as e:
        print(f"Error: {e}. The specified document file '{file_path}' was not found.")
        return None
    except PermissionError as e:
        print(f"Error: {e}. Permission denied while trying to read the file '{file_path}'. Check file permissions.")
        return None
    except Exception as e:
        print(f"Error: {e}. An unexpected error occurred while processing the document.")
        return None


def extract_text_from_excel(file_path):
    try:
        wb = load_workbook(file_path)
        text = []
        for sheet in wb:
            for row in sheet.iter_rows(values_only=True):
                text.extend(filter(None, row))
        return ' '.join(map(str, text))
    except Exception as e:
        print(f"Greška pri čitanju Excel datoteke: {e}")
        return None


# Unchanged functions
def calculate_strength_percentage(count):
    if count <= 20:
        return 10
    elif count <= 40:
        return 20
    elif count <= 60:
        return 30
    elif count <= 80:
        return 40
    elif count <= 100:
        return 50
    elif count <= 250:
        return 60
    elif count <= 500:
        return 70
    elif count <= 1000:
        return 80
    elif count <= 2000:
        return 90
    else:
        return 99


# Unchanged functions
def get_original_text(hashed_word, input_directory):
    hashed_word = hashed_word.upper()
    for root, _, files in os.walk(input_directory):
        for file in files:
            file_path = os.path.join(root, file)
            content = extract_text_from_file(file_path)
            if content is not None:
                words = content.split()
                for word in words:
                    if hashlib.sha1(word.encode()).hexdigest().upper() == hashed_word:
                        return word, file_path
    return "Original text not found", "File path not found"


# Unchanged functions
def check_password_strength(password):
    return any(c.isupper() for c in password) and any(c.islower() for c in password) \
        and (any(c.isdigit() for c in password) or any(not c.isalnum() for c in password))


# ...

# Adjusted function
def check_word_complexity(word):
    # Provjerite složenost riječi (mora sadržavati najmanje jedno veliko slovo, jedno malo slovo, jedan broj ili jedan specijalni znak)
    return any(c.isupper() for c in word) and any(c.islower() for c in word) \
        and (any(c.isdigit() for c in word) and any(not c.isalnum() for c in word))

# ...

# Adjusted function
def hash_words_and_write_to_file(input_directory, output_file):
    generated_file_path = os.path.join("C:\\Temp", "generated_words.txt")
    output_file_path = os.path.join("C:\\Temp", output_file)

    with open(generated_file_path, 'w', encoding='utf-8') as output:
        for root, _, files in os.walk(input_directory):
            for file in files:
                file_path = os.path.join(root, file)
                content = extract_text_from_file(file_path)

                if content is not None:
                    words = content.split()
                    for word in words:
                        if ( 7 <= len(word) <= 12 and check_word_complexity(word)) or (re.match(r"[^@]+@[^\s]+\.(com|hr)$", word)):
                            hashed_word = hashlib.sha1(word.encode()).hexdigest().upper()
                            output.write(f"{hashed_word}\n")

    tqdm.write("Words hashed and written to a new file.")
    tqdm.write(f"Results saved to: {output_file_path}")
    tqdm.write("Waiting 1 seconds before checking passwords against Pwned Passwords API.")
    tqdm.write("Pauza od 1 sekundi završena.")

# ...


# Unchanged functions
def check_passwords_against_api(input_file, output_file, input_directory):
    api_url = "https://api.pwnedpasswords.com/range/"
    generated_file_path = os.path.join(os.getcwd(), "generated_words.txt")
    output_match_file_path = os.path.join("C:\\Temp", output_file)

    total_generated_words = sum(1 for _ in open(generated_file_path, 'r', encoding='utf-8'))
    remaining_generated_words = total_generated_words

    with open(output_match_file_path, 'w', encoding='utf-8') as match_file:
        match_file.write("Passwords checked against Pwned Passwords API. Matched passwords:\n")

        if not os.path.exists(generated_file_path):
            tqdm.write("Generated file not found.")
            return

        matched_passwords = []
        word_document_map = {}
        generated_hashes = set(open(generated_file_path, 'r', encoding='utf-8').read().splitlines())

        with open(input_file, 'r', encoding='utf-8') as input_file:
            for line in tqdm(input_file, desc='Checking passwords', unit='password'):
                hashed_word_prefix = line.strip()[:5]
                api_request = f"{api_url}{hashed_word_prefix}"

                response = requests.get(api_request)
                if response.status_code == 200:
                    for api_line in response.text.splitlines():
                        full_hash_api, count = api_line.strip().split(':')
                        full_hash_api = f"{hashed_word_prefix}{full_hash_api}"
                        if full_hash_api.upper() in generated_hashes:
                            original_text, file_path = get_original_text(full_hash_api, input_directory)
                            strength_percentage = calculate_strength_percentage(int(count))

                            if check_password_strength(original_text):
                                matched_passwords.append({
                                    'original_hash': full_hash_api,
                                    'api_hash': full_hash_api,
                                    'original': original_text,
                                    'strength_percentage': strength_percentage,
                                    'file_path': file_path
                                })

                            break

                remaining_generated_words -= 1
                tqdm.write(f"Remaining generated words: {remaining_generated_words}/{total_generated_words}")

                if remaining_generated_words == 0:
                    tqdm.write("All generated words checked. Stopping further requests.")
                    break

        matched_passwords.sort(key=lambda x: x['strength_percentage'], reverse=True)

        for password_info in matched_passwords:
            match_file.write(f"Original Hash: {password_info['original_hash']}\n")
            match_file.write(f"API Hash: {password_info['api_hash']}\n")
            match_file.write(f"Original: {password_info['original']}\n")
            match_file.write(f"Strength Percentage: {password_info['strength_percentage']}%\n")
            match_file.write(f"File Path: {password_info['file_path']}\n")
            match_file.write("-----\n")


if __name__ == "__main__":
    input_directory_test = "C:\\Users\\HR49010\\OneDrive - Emil Frey Group"
    output_file_generated = "generated_words.txt"
    output_match_file = "matched_passwords_results.txt"

    hash_words_and_write_to_file(input_directory_test, output_file_generated)
    check_passwords_against_api(output_file_generated, output_match_file, input_directory_test)
    tqdm.write(
        "Passwords checked against Pwned Passwords API. Matched passwords saved to matched_passwords_results.txt.")
